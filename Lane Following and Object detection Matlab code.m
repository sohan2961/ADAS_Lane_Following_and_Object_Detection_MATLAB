function [allData, scenario, sensors] = HighwayLaneFollowingAndObjectD()
%HighwayLaneFollowingAndObjectD - Returns sensor detections
%    allData = HighwayLaneFollowingAndObjectD returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = HighwayLaneFollowingAndObjectD optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.2 (R2024b) and Automated Driving Toolbox 24.2 (R2024b).
% Generated on: 12-Aug-2025 16:29:44

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

% Add sensors to scenario
addSensors(scenario, sensors, egoVehicle.ActorID);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        if ~isa(sensor,'insSensor')
            poses = targetPoses(scenario,sensor.SensorIndex);
        end
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor();
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [2.7 0], ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [1.9 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'HasElevation', true, ...
    'FieldOfView', [100 5], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-91.5343414997008 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [93.0286985783406 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{6} = lidarPointCloudGenerator('SensorIndex', 6, ...
    'SensorLocation', [0.95 0], ...
    'ActorProfiles', profiles);
numSensors = 6;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-51 -6.9 0;
    66 -7 0];
laneSpecification = lanespec(2, 'Width', 6);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [30.4 75.3 0;
    29.8 -61.2 0];
laneSpecification = lanespec(2, 'Width', 6);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [65.4 -6.9 0;
    89.4 -9.2 0;
    34.3 -89.7 0;
    29.9 -55.4 0];
laneSpecification = lanespec(2, 'Width', 6);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-45.6192307438428 -9.91692230443559 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-45.6192307438428 -9.91692230443559 0;
    -6.5 -9.9 0;
    9.6 -9.8 0;
    19 -9.6 0;
    26.8 -12.7 0;
    27.6 -18.7 0;
    27.4 -27 0;
    27.1 -34.7 0;
    27 -53.4 0;
    27.37 -68.01 0;
    28.67 -81.31 0;
    32.47 -92.31 0;
    38.17 -103.41 0;
    47.1 -113.2 0;
    58.7 -120.4 0;
    73.7 -125.2 0;
    87 -125.5 0;
    100.6 -122.35 0.01;
    117.89 -113.47 0.01;
    122.87 -107.87 0.01;
    134.1 -92.6 0;
    139.6 -74.3 0;
    138.4 -56.7 0;
    131.3 -37.6 0;
    123.6 -27 0;
    115.2 -18.1 0;
    105.3 -11.5 0];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [105.2 -18.7 0], ...
    'RearOverhang', 1, ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [105.2 -18.7 0;
    123.9 -36 0;
    131.3 -50.5 0;
    133.3 -69.5 0;
    131 -84.1 0;
    122 -100.3 0;
    110.1 -110.8 0;
    91 -119 0;
    71.9 -119.3 0;
    52.7 -110 0;
    40.6 -95.4 0;
    35.2 -82.19 0.01;
    33.14 -70.16 0.01;
    32.58 -54.66 0.01;
    32.53 -33.2 0.01;
    32.46 -16.13 0.01;
    33.07 14.74 0.01;
    33.22 34.7 0.01;
    33.5 57.1 0;
    33.8 73.46 0.01];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50];
trajectory(truck, waypoints, speed);

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [27.4186948387751 71.7748014481589 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car 1');
waypoints = [27.4186948387751 71.7748014481589 0;
    27.5 55.3 0;
    27.5 31 0;
    27.3 15 0;
    27.1 1.8 0;
    28.2 -5.3 0;
    40.3 -10.1 0;
    60.8 -10.2 0;
    79.5 -10.6 0;
    97.7 -14.8 0;
    117.1 -27.4 0;
    130.6 -46.7 0;
    133.7 -65.3 0;
    132.8 -78.4 0;
    126.9 -93.8 0;
    117.1 -106 0;
    106.1 -113.9 0;
    94.2 -118 0;
    83.8 -120.2 0;
    76.2 -119.9 0;
    63.4 -116.6 0];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50];
trajectory(car1, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

